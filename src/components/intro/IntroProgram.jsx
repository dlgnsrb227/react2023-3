import React from "react";

const IntroProgram = () => {
  return (
    <>
      <div className="intro__program container">
        <h2 className="react">React.js</h2>
        <p>
          React.js는 페이스북에서 개발한 오픈 소스 JavaScript 라이브러리로,
          사용자 인터페이스(UI)를 구축하기 위해 사용됩니다.
          <br />
          React는 재사용 가능한 UI 컴포넌트를 작성하고 이를 조합하여 복잡한 UI를
          만들 수 있도록 돕는다는 점에서 매우 강력하고 인기 있는 도구입니다.
        </p>
        <p>
          React는 가상 DOM(Virtual DOM) 기술을 기반으로 작동합니다.
          <br /> 이는 React가 UI 변경 사항을 실제 DOM에 직접 적용하는 대신 가상
          DOM에 변경 사항을 적용한 다음 최소한의 DOM 조작으로 업데이트를
          수행하는 것을 의미합니다.
          <br /> 이 방식은 성능을 향상시키고 웹 애플리케이션의 반응성을 개선하는
          데 도움이 됩니다.
        </p>
        <div className="intro__program__desc">
          <span>React.js 주요특징</span>
          <ul>
            <li>
              컴포넌트 기반: React는 재사용 가능한 UI 컴포넌트를 작성하는 데
              초점을 맞추고 있습니다.
              <br /> 각 컴포넌트는 자체적으로 동작하며, 다른 컴포넌트와 조합하여
              복잡한 UI를 구성할 수 있습니다.
            </li>
            <li>
              가상 DOM: React는 가상 DOM을 사용하여 최소한의 DOM 조작으로
              업데이트를 수행합니다.
              <br /> 이는 변경 사항을 효율적으로 적용하고 성능을 향상시킵니다.
            </li>
            <li>
              단방향 데이터 흐름: React는 단방향 데이터 흐름을 채택하고
              있습니다.
              <br /> 데이터는 상위 컴포넌트에서 하위 컴포넌트로 흘러가며, 하위
              컴포넌트는 상위 컴포넌트의 데이터를 수정할 수 없습니다.
              <br /> 이는 애플리케이션의 상태 변화를 추적하기 쉽게 만들어줍니다.
            </li>
            <li>
              JSX: JSX는 JavaScript를 확장한 문법으로, JavaScript 코드 안에서
              XML과 유사한 구문을 사용하여 컴포넌트의 구조와 모양을 정의할 수
              있게 합니다.
              <br /> 이는 가독성을 높이고 컴포넌트의 렌더링 로직과 UI 구성
              요소를 한 곳에서 관리할 수 있게 도와줍니다.
            </li>
          </ul>
        </div>
      </div>
      <div className="intro__program container">
        <h2 className="vue">Vue.js</h2>
        <p>
        Vue.js는 사용자 인터페이스를 구축하기 위한 프로그레시브 프레임워크입니다. <br />즉, 작은 규모의 프로젝트부터 복잡한 단일 페이지 애플리케이션까지 다양한 규모와 요구사항에 맞게 점진적으로 확장할 수 있습니다. 
          <br />
          Vue.js는 MVVM(Model-View-ViewModel) 패턴을 기반으로 하며, 가상 DOM(Virtual DOM)을 사용하여 성능을 향상시킵니다.
        </p>
        <p>
        Vue.js는 HTML, CSS 및 JavaScript와 통합하여 사용할 수 있도록 설계되어 있습니다.<br />
        애플리케이션의 사용자 인터페이스를 작성하기 위해 Vue.js의 템플릿 문법을 사용할 수 있으며,<br />
        이를 통해 데이터와 DOM을 바인딩하고, 반응형으로 업데이트할 수 있습니다. <br />
        또한, Vue.js는 컴포넌트 기반 아키텍처를 제공하여 재사용 가능한 UI 요소를 만들고 조합할 수 있습니다.
        </p>
        <div className="intro__program__desc">
          <span>Vue.js의 주요특징</span>
          <ul>
            <li>
            반응형 데이터 바인딩: Vue.js는 데이터와 DOM 요소를 양방향으로 바인딩하여 데이터 변경 시 자동으로 화면을 업데이트할 수 있습니다.<br /> 이를 통해 개발자는 직접 DOM 조작을 할 필요 없이 데이터 상태만 관리하면 됩니다.
            </li>
            <li>
            컴포넌트 기반 아키텍처: Vue.js는 재사용 가능한 컴포넌트를 생성하고 조합할 수 있는 컴포넌트 기반 아키텍처를 제공합니다. <br />각 컴포넌트는 자체의 데이터, 템플릿, 스타일을 갖고 있으며, 상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달할 수 있습니다.
            </li>
            <li>
            가상 DOM: Vue.js는 가상 DOM을 사용하여 변경된 부분만 실제 DOM에 적용함으로써 성능을 최적화합니다.<br /> 가상 DOM은 실제 DOM과 동기화되며, 변경된 부분만 실제 DOM에 반영하여 불필요한 렌더링을 줄여줍니다.
            </li>
            <li>
            디렉티브: Vue.js는 HTML 태그에 v- 접두사가 있는 디렉티브를 사용하여 템플릿에서 동적인 동작을 수행할 수 있습니다.<br /> 예를 들어, v-bind 디렉티브를 사용하여 요소의 속성을 데이터에 연결하거나, v-for 디렉티브를 사용하여 배열을 반복적으로 렌더링할 수 있습니다.
            </li>
            <li>
            라우팅: Vue.js는 vue-router를 통해 클라이언트 측 라우팅을 지원합니다.<br /> 이를 사용하여 다른 URL에 대한 라우팅 규칙을 정의하고, 컴포넌트 간의 전환과 상태 관리를 쉽게 처리할 수 있습니다.
            </li>
            <li>
            상태 관리: Vue.js는 Vuex라는 상태 관리 패턴 및 라이브러리를 제공합니다.<br /> Vuex를 사용하여 애플리케이션의 상태를 중앙 집중식으로 관리하고, 다른 컴포넌트 간의 데이터 공유와 효율적인 상태 업데이트를 수행할 수 있습니다.
            </li>
            </ul>
        </div>
      </div>
      <div className="intro__program container">
        <h2 className="vite">Vite.js</h2>
        <p>
        Vite.js는 현대적인 웹 개발을 위한 빠르고 경량화된 웹 개발 빌드 도구입니다.<br />
        Vue.js 팀에서 개발한 Vite.js는 Vue.js 애플리케이션 개발을 위해 특히 최적화되었지만, 다른 프레임워크나 라이브러리에도 사용할 수 있습니다.<br />
        Vite.js는 개발 환경에서의 빠른 개발 속도와 최적화된 빌드를 제공하여 개발자들에게 탁월한 개발 경험을 제공합니다.
        </p>
        <div className="intro__program__desc">
          <span>Vite.js 주요특징</span>
          <ul>
            <li>
            빠른 개발 서버: Vite.js는 개발 서버를 통해 빠른 개발 속도를 제공합니다.<br />
            개발 서버는 기본적인 자산 변환 및 모듈 해석을 실시간으로 처리하며, 브라우저로부터의 요청에 필요한 자산을 빠르게 제공합니다.<br />
            이는 변경된 파일만 다시 빌드하여 핫 리로딩(Hot Reloading)을 지원하고, 개발 중인 애플리케이션의 변경 사항을 실시간으로 반영할 수 있도록 도와줍니다.
            </li>
            <li>
            빠른 빌드: Vite.js는 빌드 과정에서 미리 컴파일된 모듈을 캐싱하여 향상된 성능을 제공합니다.<br />
            이는 개발 중에도 미리 컴파일된 모듈을 활용하므로, 빌드 시간을 크게 단축시켜 줍니다.<br />
            또한, 동적 임포트(Dynamic Import)를 통해 필요한 모듈만 요청하여 번들 크기를 최소화합니다.
            </li>
            <li>
            ES 모듈 지원: Vite.js는 네이티브 ES 모듈 지원을 통해 모듈 시스템을 기반으로 개발할 수 있도록 합니다.<br />
            이는 각 파일이 별도의 모듈로 처리되므로, 효율적인 종속성 관리와 번들 크기 최적화를 가능하게 합니다.
            </li>
            <li>
            다중 프레임워크 지원: Vite.js는 Vue.js를 위해 특별히 최적화되었지만,<br />
            React, Preact, Lit, Svelte 등과 같은 다른 프레임워크 및 라이브러리와도 함께 사용할 수 있습니다.<br />
            따라서 개발자들은 선호하는 프레임워크를 사용하여 Vite.js의 이점을 활용할 수 있습니다.
            </li>
            <li>
            플러그인 시스템: Vite.js는 다양한 플러그인을 통해 기능을 확장할 수 있는 유연한 플러그인 시스템을 제공합니다.<br />
            개발자들은 필요에 따라 플러그인을 추가하거나 직접 커스텀 플러그인을 작성하여 개발 환경을 더욱 효율적으로 구성할 수 있습니다.
            </li>
          </ul>
        </div>
      </div>
      <div className="intro__program container">
        <h2 className="next">Next.js</h2>
        <p>
        Next.js는 React 기반의 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(Static Site Generation, SSG)을 지원하는 웹 프레임워크입니다.<br />
        Next.js는 React의 기능을 확장하고 보강하여 웹 애플리케이션의 개발을 간소화하고 성능을 최적화하는 데 도움을 줍니다.
        </p>
        <div className="intro__program__desc">
          <span>React.js 주요특징</span>
          <ul>
            <li>
            서버 사이드 렌더링 (SSR): Next.js는 서버 사이드 렌더링을 기본적으로 지원합니다.<br />
            이는 서버에서 초기 HTML을 생성하고 클라이언트로 전송하여 초기 로딩 속도를 향상시킵니다.<br />
            SSR은 검색 엔진 최적화(SEO)에 유리하며, 동적인 콘텐츠를 렌더링하거나 사용자에게 개인화된 콘텐츠를 제공하는 데 유용합니다.
            </li>
            <li>
            정적 사이트 생성 (SSG): Next.js는 정적 사이트 생성을 지원하여 사전에 페이지를 미리 렌더링하여 정적인 HTML 파일을 생성할 수 있습니다. 이를 통해 웹 페이지의 로딩 속도를 크게 개선할 수 있습니다.<br />
            정적 사이트 생성은 블로그, 제품 목록, 문서 페이지 등과 같이 콘텐츠가 자주 변경되지 않는 경우에 적합합니다.
            </li>
            <li>
            자동 코드 분할 (Automatic Code Splitting): Next.js는 자동으로 페이지 간에 필요한 JavaScript와 CSS를 분할하여 로딩 속도를 최적화합니다.<br />
            각 페이지는 필요한 코드만을 로드하므로 초기 로딩 시간이 단축되고, 사용자 경험을 향상시킵니다.
            </li>
            <li>
            클라이언트 사이드 라우팅 (Client-Side Routing): Next.js는 클라이언트 사이드 라우팅을 제공하여 사용자의 인터랙션에 따라 필요한 컴포넌트만 로드하고 업데이트할 수 있습니다.<br />
            이를 통해 애플리케이션의 성능을 향상시키고, 부드러운 페이지 전환을 제공할 수 있습니다.
            </li>
            <li>
            API 라우트: Next.js는 API 라우트를 제공하여 서버리스 함수 형태로 백엔드 엔드포인트를 구성할 수 있습니다.<br />
            이를 활용하여 데이터 요청 및 처리를 위한 API 엔드포인트를 구축할 수 있습니다.
            </li>
            <li>
            환경 설정 간편화: Next.js는 기본적으로 구성이 간단하며, 쉬운 설정 옵션을 제공합니다.<br />
            Babel, Webpack, Hot Module Replacement(HMR) 등의 도구와 기능을 미리 구성되어 있어 개발자는 별도의 설정 없이 바로 개발을 시작할 수 있습니다.
            </li>
          </ul>
        </div>
      </div>
    </>
  );
};

export default IntroProgram;
